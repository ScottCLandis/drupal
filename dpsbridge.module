<?php
/**
 * @file
 * Module provides funcationality to generate Adobe DPS Folios from Drupal.
 */

/**
 * Implements hook_init().
 */
function dpsbridge_init() {
  module_load_include('inc', 'dpsbridge', 'dpsbridge_helper');
  module_load_include('inc', 'dpsbridge', 'dpsbridge_style_foundation');
  
  // Load DPS API related functions and classes
  module_load_include('inc', 'dpsbridge', 'includes/dpsbridge.next.config');
  module_load_include('inc', 'dpsbridge', 'includes/dpsbridge.next.util');
  module_load_include('inc', 'dpsbridge', 'includes/dpsbridge.next.curl');
  module_load_include('inc', 'dpsbridge', 'includes/dpsbridge.next.user');
  module_load_include('inc', 'dpsbridge', 'includes/dpsbridge.next.authentication');
  module_load_include('inc', 'dpsbridge', 'includes/dpsbridge.next.entity');
  module_load_include('inc', 'dpsbridge', 'includes/dpsbridge.next.article');
  module_load_include('inc', 'dpsbridge', 'includes/dpsbridge.next.collection');
  module_load_include('inc', 'dpsbridge', 'includes/dpsbridge.next.exception');
  module_load_include('inc', 'dpsbridge', 'includes/dpsbridge.next.manifest');
}

/**
 * Implements hook_menu().
 */
function dpsbridge_menu() {
  $items = array();

  $items['admin/config/dpsnext'] = array(
    'title' => 'Adobe Publish',
    'description' => "Manage Adobe Publish Settings.",
    'position' => 'left',
    'weight' => -7,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer adobe publish settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/dpsnext/settings'] = array(
    'title' => 'Adobe Publish Settings',
    'description' => "Manage Adobe Publish Settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dpsbridge_next_admin_config_settings'),
    'access callback' => 'user_access',    
    'access arguments' => array('administer adobe publish settings'),
    'file' => 'dpsbridge.admin.inc',
    'weight' => -50,
  );
  
  return $items;
}

/**
 * Implements hook_node_view_alter().
 */
function dpsbridge_node_view_alter(&$build) {
  if(isset($build['#node'])) {
    $node = $build['#node'];
    // Hide contextual links for 'Adobe Publish' view mode
    if (!empty($node->nid) && ($build['#view_mode'] == 'dps')) {
      $build ['#contextual_links']['node'] = array('node', array());
    }
  }
}
/**
 * Implements hook_form_alter().
 */
function dpsbridge_form_alter(&$form, &$form_state, $form_id) { 
  // Only include on node add/edit forms.
  if (!empty($form['#node_edit_form'])) {
    //dsm($form);return;
    //watchdog('dpsbridge', '<pre>'.print_r($form, true).'</pre>');
    // Check if current node type is in allowed types
    $allowed_node_types = dpsbridge_helper_next_get_node_types(array());
    $adobe_publish_fields = dpsbridge_helper_next_install_fields();
    if (in_array($form['#node']->type, $allowed_node_types)) {
      // Create a fieldset that will be included in the vertical tab.
      $form['dpsbridge_options'] = array(
        '#type' => 'fieldset',
        '#title' => t('Adobe Publish Options'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#tree' => TRUE,
        // Send this tab to the top of the list.
        '#weight' => -99,
        '#group' => 'additional_settings',
      );
      
      foreach ($adobe_publish_fields as $field_name => $field_info) {
        $form['dpsbridge_options'][$field_name] = $form[$field_name];
      }
      foreach ($adobe_publish_fields as $field_name => $field_info) {
        unset($form[$field_name]);
      }
      // Unset not allowed stylesheets
      $stylesheets = variable_get(DPSNextConfig::VARIABLE_STYLESHEETS, array());
      foreach ($stylesheets as $name => $stylesheet) {
        if ($stylesheet['value'] === 0) {
          unset($form['dpsbridge_options']['field_adobe_publish_style'][LANGUAGE_NONE]['#options'][$name]);
        }
      }
    }
    elseif ($form['#node']->type == 'collection') {
      // Create a fieldset that will be included in the vertical tab.
      $form['dpsbridge_options'] = array(
        '#type' => 'fieldset',
        '#title' => t('Adobe Publish Options'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#tree' => TRUE,
        // Send this tab to the top of the list.
        '#weight' => -99,
        '#group' => 'additional_settings',
      );
      $form['dpsbridge_options']['field_collection_status'] = $form['field_collection_status'];
    
      unset($form['field_collection_status']);
    }
    else {
      foreach ($adobe_publish_fields as $field_name => $field_info) {
        unset($form[$field_name]);
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function dpsbridge_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['dps'] = array(
    'label' => t('Adobe Publish'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_node_info().
 */
function dpsbridge_node_info() {
  return array(
    'collection' => array(
      'name' => t('Collection'),
      'base' => 'node_content',
      'description' => t('Collection node containing metadata for Collection Producer.'),
      'has_title' => TRUE,
      'title_label' => t('Collection Title'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function dpsbridge_permission() {
  return array(
    'administer adobe publish settings' => array(
      'title' => t('Administrator Adobe Publish'),
      'description' => t('Allow users to administrator Adobe Publish.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dpsbridge_theme() {
  $path = drupal_get_path('module', 'dpsbridge');
  return array(
    'dpsbridge_foundation_next' => array(
      'variables' => array(
        'ds_content' => NULL,
        'publication' => NULL,
        'kicker' => NULL,
        'title' => NULL,
        'author' => NULL,
        'images' => NULL,
        'filename' => NULL,
        'videos' => NULL,
        'paragraphs' => NULL,
      ),
      'template' => 'dpsbridge-foundation-next',
      'path' => $path . '/theme',
    ),
    'dpsbridge_date' => array(
      'render element' => 'element',
    ),
    'dpsbridge_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'title' => NULL,
        'image_style' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function dpsbridge_field_formatter_info() {
  $formatters = array(
    'dps_image' => array(
      'label' => t('DPS Image'),
      'field types' => array('image'),
      'settings' => array('image_style' => ''),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function dpsbridge_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'dps_image') {
    $image_styles = image_style_options(FALSE, PASS_THROUGH);
    $element['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
    );
    return $element;
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function dpsbridge_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'dps_image') {
    $summary = array();

    $image_styles = image_style_options(FALSE, PASS_THROUGH);
    // Unset possible 'No defined styles' option.
    unset($image_styles['']);
    // Styles could be lost because of enabled/disabled modules that defines
    // their styles in code.
    if (isset($image_styles[$settings['image_style']])) {
      $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
    }
    else {
      $summary[] = t('Original image');
    }

    return implode('<br />', $summary);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function dpsbridge_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'dps_image') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#theme' => 'dpsbridge_image_formatter',
        '#item' => $item,
        '#image_style' => $display['settings']['image_style'],
        '#title' => $entity->title,
      );
    }
  }

  return $element;
}

/**
 * Implements hook_views_api().
 */
function dpsbridge_views_api() {
  return array(
    'api' => 2.0,
  );
}
/**
 * Implements hook_node_validate().
 */
function dpsbridge_node_validate($node, $form, &$form_state) {
  $allowed_node_types = dpsbridge_helper_next_get_node_types(array());
  if (in_array($node->type, $allowed_node_types)) {
    $node->field_adobe_publish_author_url = $node->dpsbridge_options['field_adobe_publish_author_url'];
    // validate author url
    $author_url = $node->field_adobe_publish_author_url[LANGUAGE_NONE][0]['value'];
    if (($author_url != '') && !valid_url($author_url, TRUE)) {
      form_set_error('dpsbridge_options][field_adobe_publish_author_url', t('Author URL needs to be in the form of http:// or https://'));
    }
  }
}
/**
 * Implements hook_node_presave().
 */
function dpsbridge_node_presave($node) {
  $allowed_node_types = dpsbridge_helper_next_get_node_types(array());
  if (in_array($node->type, $allowed_node_types)) {
    $adobe_publish_fields = dpsbridge_helper_next_install_fields();
    foreach ($adobe_publish_fields as $field_name => $field_info) {
      $node->$field_name = $node->dpsbridge_options[$field_name];
    }
  }
  elseif ($node->type == 'collection') {
    // Create a fieldset that will be included in the vertical tab.
    $node->field_collection_status = $node->dpsbridge_options['field_collection_status'];
  }
}
/**
 * Implements hook_node_insert().
 *
 * Upon inserting a collection,
 *  call API to create collection on remote producer. 
 */
function dpsbridge_node_insert($node) {  
  $allowed_node_types = dpsbridge_helper_next_get_node_types(array());
  if (in_array($node->type, $allowed_node_types)) {
    if (isset($node->field_adobe_publish_uploaded) && ($node->field_adobe_publish_uploaded[LANGUAGE_NONE][0]['value'] == '1')) {
      dpsbridge_helper_next_create_article($node);
    }
  }
  elseif ($node->type == 'collection') {
    if (!isset($node->field_collection_status) || ($node->field_collection_status[LANGUAGE_NONE][0]['value'] != '1')) {
      return;
    }
    
    $title = $node->title;
    $nid = $node->nid;
    $container = array();

    $entity_name = dpsbridge_helper_next_get_entityname($nid, $title);
    $short_title = isset($node->field_collection_short_title[LANGUAGE_NONE][0]['value']) ? $node->field_collection_short_title[LANGUAGE_NONE][0]['value'] : '';
    $abstract = isset($node->field_collection_abstract[LANGUAGE_NONE][0]['value']) ? $node->field_collection_abstract[LANGUAGE_NONE][0]['value'] : '';
    $short_abstract = isset($node->field_collection_short_abstract[LANGUAGE_NONE][0]['value']) ? $node->field_collection_short_abstract[LANGUAGE_NONE][0]['value'] : '';
    $category = isset($node->field_collection_category[LANGUAGE_NONE][0]['value']) ? $node->field_collection_category[LANGUAGE_NONE][0]['value'] : '';
    $keywords = isset($node->field_collection_keywords[LANGUAGE_NONE][0]['value']) ? $node->field_collection_keywords[LANGUAGE_NONE][0]['value'] : '';
    $internal_keywords = isset($node->field_collection_int_keywords[LANGUAGE_NONE][0]['value']) ? $node->field_collection_int_keywords[LANGUAGE_NONE][0]['value'] : '';
    $reading_position = isset($node->field_collection_reading_pos[LANGUAGE_NONE][0]['value']) ? $node->field_collection_reading_pos[LANGUAGE_NONE][0]['value'] : '';
    $opento = isset($node->field_collection_opento[LANGUAGE_NONE][0]['value']) ? $node->field_collection_opento[LANGUAGE_NONE][0]['value'] : '';
    $importance = isset($node->field_collection_importance[LANGUAGE_NONE][0]['value']) ? $node->field_collection_importance[LANGUAGE_NONE][0]['value'] : '';
    $department = isset($node->field_collection_department[LANGUAGE_NONE][0]['value']) ? $node->field_collection_department[LANGUAGE_NONE][0]['value'] : '';
    $keywords = dpsbridge_helper_next_get_keywords($nid, $keywords);
    $internal_keywords = dpsbridge_helper_next_get_keywords($nid, $internal_keywords);
    
    $variables = array();
    $request_params = DPSNextUtil::getRequestParams($variables);
    $credentials = $request_params['credentials'];
    $parameters = $request_params['parameters'];
    $endpoints = $request_params['endpoints'];
    $collection_metadata_post = array(
      'title' => $title,
      'abstract' => $abstract,
      'shortTitle' => $short_title,
      'shortAbstract' => $short_abstract,
      'department' => $department,
      'category' => $category,
      'keywords' => $keywords,
      'internalKeywords' => $internal_keywords,
      'readingPosition' => $reading_position,
      'openTo' => $opento,
      'importance' => $importance,
    ); 
    // initialize article one object
    $articleOneObj = new DPSNextCollection($credentials,
                   $parameters,
                   $endpoints);
    $articleOneObj->setEntityName($entity_name);
    
    // Authentication
    $is_authenticated = $articleOneObj->isAuthenticated();
    if ($is_authenticated) {
      // Authorization and store pulication/project path (This should be done with UI instead)
      $articleOneObj->getPermissions();
      // create article one metadata
      $articleOneObj->create($collection_metadata_post);
      // Upload thumbnail image if uploaded
      $file_exists = FALSE;
      $field_thumb_image = field_get_items('node', $node, 'field_collection_image_thumb');
      if (isset($field_thumb_image[0]['fid']) && !empty($field_thumb_image[0]['fid'])) {
        $file_exists = TRUE;
        $img_path = file_load($field_thumb_image[0]['fid'])->uri;
        $thumb_image_url = drupal_realpath($img_path);
        $articleOneObj->uploadImage($thumb_image_url, 'thumbnail');
      }
      // Upload background image if uploaded
      $field_back_image = field_get_items('node', $node, 'field_collection_image_back');
      if (isset($field_back_image[0]['fid']) && !empty($field_back_image[0]['fid'])) {
        $file_exists = TRUE;
        $img_path = file_load($field_back_image[0]['fid'])->uri;
        $back_image_url = drupal_realpath($img_path);
        $articleOneObj->uploadImage($back_image_url, 'background');
      }
      if ($file_exists) {
        // update collection with reference to the background & thumbnail image
        $articleOneObj->getMetadata();
        $articleOneObj->update();
        $articleOneObj->seal();
      }
      // Add article to collection
      if (isset($node->field_collection_reference[LANGUAGE_NONE])) {
        $article_references = $node->field_collection_reference[LANGUAGE_NONE];
        foreach ($article_references as $ref) {
          $target_node_id = $ref['target_id'];
          $target_node_article = node_load($target_node_id);
          $target_article_entity_name = dpsbridge_helper_next_get_entityname($target_node_id, $title);
          //dpsbridge_helper_next_create_article($target_node_article);
          $target_article_obj = new DPSNextArticle($credentials,
                 $parameters,
                 $endpoints);
          $target_article_obj->setEntityName($target_article_entity_name);
          // set publication path
          $target_article_obj->getPermissions();
          try {
            $target_article_obj->getMetadata();
          } catch (DPSNextException $ex) {
            if ($ex->getCode() == '404') {
              // Create article if not found
              dpsbridge_helper_next_create_article($target_node_article);
              $target_article_obj->getMetadata();
            }
            else {
              // Other error
              drupal_set_message($ex->getMessage(), 'error');
              watchdog('dpsbridge', $ex->getMessage());
              exit();
            }
          }
          $articleOneObj->add($target_article_obj);
          // request and store the latest collection version
          $articleOneObj->getMetadata();
          // update the collection with reference to article
          $articleOneObj->update();
        }
      }

      $version_id = $articleOneObj->version;
    }
    if ($version_id) {
      dpsbridge_helper_next_set_version($nid, $version_id);
      $container['message'] = 'ok';
      $container['version_id'] = $version_id;
    } 
    else {
      $container['message'] = '[Error] Failed to create metadata!';
    }
  }
}
/**
 * Implements hook_node_update().
 *
 * Upon updating an article,
 *  mark all folios that contain this article as out-of-sync
 */
function dpsbridge_node_update($node) {
  $allowed_node_types = dpsbridge_helper_next_get_node_types(array());
  if (in_array($node->type, $allowed_node_types)) {
    if (isset($node->field_adobe_publish_uploaded) && ($node->field_adobe_publish_uploaded[LANGUAGE_NONE][0]['value'] == '1')) {
      dpsbridge_helper_next_create_article($node);
    }
  }
  elseif ($node->type == 'collection') {
    if (!isset($node->field_collection_status) || ($node->field_collection_status[LANGUAGE_NONE][0]['value'] != '1')) {
      return;
    }
    $title = $node->title;
    $nid = $node->nid;
    $container = array();

    $entity_name = dpsbridge_helper_next_get_entityname($nid, $title);
    $short_title = isset($node->field_collection_short_title[LANGUAGE_NONE][0]['value']) ? $node->field_collection_short_title[LANGUAGE_NONE][0]['value'] : '';
    $abstract = isset($node->field_collection_abstract[LANGUAGE_NONE][0]['value']) ? $node->field_collection_abstract[LANGUAGE_NONE][0]['value'] : '';
    $short_abstract = isset($node->field_collection_short_abstract[LANGUAGE_NONE][0]['value']) ? $node->field_collection_short_abstract[LANGUAGE_NONE][0]['value'] : '';
    $category = isset($node->field_collection_category[LANGUAGE_NONE][0]['value']) ? $node->field_collection_category[LANGUAGE_NONE][0]['value'] : '';
    $keywords = isset($node->field_collection_keywords[LANGUAGE_NONE][0]['value']) ? $node->field_collection_keywords[LANGUAGE_NONE][0]['value'] : '';
    $internal_keywords = isset($node->field_collection_int_keywords[LANGUAGE_NONE][0]['value']) ? $node->field_collection_int_keywords[LANGUAGE_NONE][0]['value'] : '';
    $reading_position = isset($node->field_collection_reading_pos[LANGUAGE_NONE][0]['value']) ? $node->field_collection_reading_pos[LANGUAGE_NONE][0]['value'] : '';
    $opento = isset($node->field_collection_opento[LANGUAGE_NONE][0]['value']) ? $node->field_collection_opento[LANGUAGE_NONE][0]['value'] : '';
    $importance = isset($node->field_collection_importance[LANGUAGE_NONE][0]['value']) ? $node->field_collection_importance[LANGUAGE_NONE][0]['value'] : '';
    $department = isset($node->field_collection_department[LANGUAGE_NONE][0]['value']) ? $node->field_collection_department[LANGUAGE_NONE][0]['value'] : '';
    $keywords = dpsbridge_helper_next_get_keywords($nid, $keywords);
    $internal_keywords = dpsbridge_helper_next_get_keywords($nid, $internal_keywords);
    
    $variables = array();
    $request_params = DPSNextUtil::getRequestParams($variables);
    $credentials = $request_params['credentials'];
    $parameters = $request_params['parameters'];
    $endpoints = $request_params['endpoints'];
    $collection_metadata_post = array(
      'title' => $title,
      'abstract' => $abstract,
      'shortTitle' => $short_title,
      'shortAbstract' => $short_abstract,
      'department' => $department,
      'category' => $category,
      'keywords' => $keywords,
      'internalKeywords' => $internal_keywords,
      'readingPosition' => $reading_position,
      'openTo' => $opento,
      'importance' => $importance,
    ); 
    // initialize article one object
    $articleOneObj = new DPSNextCollection($credentials,
                   $parameters,
                   $endpoints);
    $articleOneObj->setEntityName($entity_name);
    
    // Authentication
    $is_authenticated = $articleOneObj->isAuthenticated();
    if ($is_authenticated) {
      // Authorization and store pulication/project path (This should be done with UI instead)
      $articleOneObj->getPermissions();
      $entity_exists = TRUE;
      try {
        $articleOneObj->getMetadata();
      } catch (DPSNextException $ex) {
        if ($ex->getCode() == '404') {
          // Entity not found
          $entity_exists = FALSE;
        }
        else {
          // Other error
          drupal_set_message($ex->getMessage(), 'error');
          watchdog('dpsbridge', $ex->getMessage());
          exit();
        }
      }
    
      $articleOneObj->create($collection_metadata_post, $entity_exists);
      // Upload thumbnail image if uploaded
      $file_exists = FALSE;
      $field_thumb_image = field_get_items('node', $node, 'field_collection_image_thumb');
      if (isset($field_thumb_image[0]['fid']) && !empty($field_thumb_image[0]['fid'])) {
        $file_exists = TRUE;
        $img_path = file_load($field_thumb_image[0]['fid'])->uri;
        $thumb_image_url = drupal_realpath($img_path);
        $articleOneObj->uploadImage($thumb_image_url, 'thumbnail');
      }
      // Upload background image if uploaded
      $field_back_image = field_get_items('node', $node, 'field_collection_image_back');
      if (isset($field_back_image[0]['fid']) && !empty($field_back_image[0]['fid'])) {
        $file_exists = TRUE;
        $img_path = file_load($field_back_image[0]['fid'])->uri;
        $back_image_url = drupal_realpath($img_path);
        $articleOneObj->uploadImage($back_image_url, 'background');
      }
      if ($file_exists) {
        // update collection with reference to the background & thumbnail image
        $articleOneObj->getMetadata();
        $articleOneObj->update();
        $articleOneObj->seal();
      }
      // Add article to collection
      if (isset($node->field_collection_reference[LANGUAGE_NONE])) {
        $article_references = $node->field_collection_reference[LANGUAGE_NONE];
        foreach ($article_references as $ref) {
          $target_node_id = $ref['target_id'];
          $target_node_article = node_load($target_node_id);
          $target_article_entity_name = dpsbridge_helper_next_get_entityname($target_node_id, $title);
          //dpsbridge_helper_next_create_article($target_node_article);
          $target_article_obj = new DPSNextArticle($credentials,
                 $parameters,
                 $endpoints);
          $target_article_obj->setEntityName($target_article_entity_name);
          // set publication path
          $target_article_obj->getPermissions();
          try {
            $target_article_obj->getMetadata();
          } catch (DPSNextException $ex) {
            if ($ex->getCode() == '404') {
              // Create article if not found
              dpsbridge_helper_next_create_article($target_node_article);
              $target_article_obj->getMetadata();
            }
            else {
              // Other error
              drupal_set_message($ex->getMessage(), 'error');
              watchdog('dpsbridge', $ex->getMessage());
              exit();
            }
          }
          $articleOneObj->add($target_article_obj);
          // request and store the latest collection version
          $articleOneObj->getMetadata();
          // update the collection with reference to article
          $articleOneObj->update();
        }
      }
      $version_id = $articleOneObj->version;
    }
    if ($version_id) {
      dpsbridge_helper_next_set_version($nid, $version_id);
      $container['message'] = 'ok';
      $container['version_id'] = $version_id;
    } 
    else {
      $container['message'] = '[Error] Failed to create metadata!';
    }
  }
}

/**
 * Theme function for number field in form.
 *
 * @param array $variables
 *   Variables passed to the theming function.
 *
 * @return string
 *   Returned themed date string.
 */
function theme_dpsbridge_date($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'date';
  element_set_attributes($element, array(
    'id',
    'name',
    'value',
    'size',
    'maxlength'));
  _form_set_class($element, array('form-text'));

  $extra = '';
  if ($element['#autocomplete_path'] && drupal_valid_path($element['#autocomplete_path'])) {
    drupal_add_library('system', 'drupal.autocomplete');
    $element['#attributes']['class'][] = 'form-autocomplete';

    $attributes = array();
    $attributes['type'] = 'hidden';
    $attributes['id'] = $element['#attributes']['id'] . '-autocomplete';
    $attributes['value'] = url($element['#autocomplete_path'], array('absolute' => TRUE));
    $attributes['disabled'] = 'disabled';
    $attributes['class'][] = 'autocomplete';
    $extra = '<input' . drupal_attributes($attributes) . ' />';
  }

  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';

  return $output . $extra;
}

/**
 * Returns HTML for an image field formatter.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: Associative array of image data, which may include "uri", "alt",
 *     "width", "height", "title" and "attributes".
 *   - image_style: An optional image style.
 *   - path: An array containing the link 'path' and link 'options'.
 *
 * @ingroup themeable
 */
function theme_dpsbridge_image_formatter($variables) {
  $item = $variables['item'];
  
  if (isset($item['fid']) && !empty($item['fid'])) {
    $img_path = file_load($item['fid'])->uri;
    $img_path = drupal_realpath($img_path);
  }
  $image = array(
    'path' => $img_path, //$item['uri'],
  );

  if (array_key_exists('alt', $item)) {
    $image['alt'] = $item['alt'];
  }

  if (isset($item['attributes'])) {
    $image['attributes'] = $item['attributes'];
  }

  if (isset($item['width']) && isset($item['height'])) {
    $image['width'] = $item['width'];
    $image['height'] = $item['height'];
  }

  // Do not output an empty 'title' attribute.
  if (isset($item['title']) && drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  $title = $variables['title'];
  $article_folder = dpsbridge_helper_format_title($title);
  $parsed = explode('/', $image['path']);
  $filename = $parsed[count($parsed) - 1];

  if ($variables['image_style']) {
    // Determine the dimensions of the styled image.
    $dimensions = array(
      'width' => $image['width'],
      'height' => $image['height'],
    );

    image_style_transform_dimensions($variables['image_style'], $dimensions);

    $variables['width'] = $dimensions['width'];
    $variables['height'] = $dimensions['height'];

    // Determine the URL for the styled image.
    $path = image_style_url($variables['image_style'], $image['path']);
    dpsbridge_helper_save_img($path, $article_folder . '/' . $filename);
  }
  else {
    $path = file_create_url($image['path']);
    dpsbridge_helper_save_img($path, $article_folder . '/' . $filename);
  }

  $output = '<img src="' . $filename . '" />';

  return $output;
}

/**
 * Create DPSBridge directory.
 */
function dpsbridge_create_diretories() {
  $dir = file_default_scheme() . '://dpsbridge';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $dir = file_default_scheme() . '://dpsbridge/html';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $dir = file_default_scheme() . '://dpsbridge/folio';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $dir = file_default_scheme() . '://dpsbridge/styles';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $dir = file_default_scheme() . '://dpsbridge/images';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
}