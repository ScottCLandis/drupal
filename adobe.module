<?php

function adobe_init() {
	drupal_add_js('misc/jquery.form.js');
	drupal_add_library('system', 'drupal.ajax');
	drupal_add_library('system', 'jquery.form');
	require_once drupal_get_path('module', 'adobe').'/adobe_helper.inc';
	require_once drupal_get_path('module', 'adobe').'/adobe_style_bootstrap.inc';
	require_once drupal_get_path('module', 'adobe').'/adobe_style_foundation.inc';
}

function adobe_menu() {
	$items = array();
	$items['adobe/dps/credentials/add'] = array(
		'title' => 'Updates the Adobe DPS Credentials',
		'page callback' => 'adobe_dps_credentials_add',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/dps/credentials/pull'] = array(
		'title' => 'Updates the Adobe DPS Credentials',
		'page callback' => 'adobe_dps_credentials_pull',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/add'] = array(
		'title' => 'Adds new folio (node)',
		'page callback' => 'adobe_folio_add',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/append'] = array(
		'title' => 'Append articles to a folio (node)',
		'page callback' => 'adobe_folio_append',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/clean-up'] = array(
		'title' => 'Deletes the generated HTML Article folders and folio files',
		'page callback' => 'adobe_folio_cleanup',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/clone-node'] = array(
		'title' => 'Creates a duplicate of the targeted folio node',
		'page callback' => 'adobe_folio_clone_node',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/delete-node'] = array(
		'title' => 'Delete targeted folio node',
		'page callback' => 'adobe_folio_delete_node',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/generate-folios'] = array(
		'title' => 'Create folio files from the generated HTML Articles',
		'page callback' => 'adobe_folio_generate_folios',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/generate-HTML'] = array(
		'title' => 'Create HTML Articles from the list of Articles',
		'page callback' => 'adobe_folio_generate_html',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/generate-selected-HTML'] = array(
		'title' => 'Create HTML Articles from the list of Articles',
		'page callback' => 'adobe_folio_generate_selected_html',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/download-selected'] = array(
		'title' => 'Download selected file (HTML article zip file)',
		'page callback' => 'adobe_folio_download_selected',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/pull-accounts'] = array(
		'title' => 'Pulls accounts associated with the folio node',
		'page callback' => 'adobe_folio_pull_accounts',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/pull-article'] = array(
		'title' => 'Pulls content regarding an article',
		'page callback' => 'adobe_folio_pull_article',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/pull-content'] = array(
		'title' => 'Pulls content regarding a folio',
		'page callback' => 'adobe_folio_pull_content',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/preview-article'] = array(
		'title' => 'Previews an article',
		'page callback' => 'adobe_folio_article_preview',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/preview-delete'] = array(
		'title' => 'Deletes the temperary preview article',
		'page callback' => 'adobe_folio_article_delete',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/update'] = array(
		'title' => 'Updates a folio (node)',
		'page callback' => 'adobe_folio_update',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/update-status'] = array(
		'title' => 'Stores the folio ID (Folio Producer) in the folio (node)',
		'page callback' => 'adobe_folio_update_status',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/update-timestamp'] = array(
		'title' => 'Updates the upload timestamp',
		'page callback' => 'adobe_folio_update_timestamp',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/folio/upload'] = array(
		'title' => 'Uploads the folio to Folio Producer (node)',
		'page callback' => 'adobe_folio_upload',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/img/upload'] = array(
		'title' => 'Saves the selected image(s)',
		'page callback' => 'adobe_img_upload',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/stylesheet/read'] = array(
		'title' => 'Reads the available local stylesheets',
		'page callback' => 'adobe_stylesheet_reader',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/stylesheet/delete'] = array(
		'title' => 'Delete stylesheets from the server',
		'page callback' => 'adobe_stylesheet_delete',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/stylesheet/upload'] = array(
		'title' => 'Upload stylesheets to the server',
		'page callback' => 'adobe_stylesheet_upload',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	$items['adobe/views/access-denied'] = array(
		'title' => 'Adobe DPS Folio Module Config page',
		'page callback' => 'adobe_views_access_denied',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK, );
	return $items;
}

/**
 * Create/update the Folio Producer credentials in the database.
 * @param string $apikey .............folio Producer API Key
 * @param string $apisec .............folio Producer API Secret
 * @param string $amazon_id ..........Amazon Folio Producer login ID
 * @param string $amazon_pass ........Amazon Folio Producer login Password 
 * @param string $amazon_dimension ...Amazon Folio Producer target dimensions
 * @param string $android_id .........Android Folio Producer login ID
 * @param string $android_pass .......Android Folio Producer login password 
 * @param string $android_dimension ..Android Folio Producer target dimensions
 * @param string $apple_id ...........Apple Folio Producer login ID
 * @param string $apple_pass .........Apple Folio Producer login password 
 * @param string $apple_dimension ....Apple Folio Producer target dimensions
 */
function adobe_dps_credentials_add() {
	$apikey            = isset($_POST['apikey'])?$_POST['apikey']:'';
	$apisec            = isset($_POST['apisec'])?$_POST['apisec']:'';
	$amazon_id         = isset($_POST['amazon_id'])?$_POST['amazon_id']:'';
	$amazon_pass  	   = isset($_POST['amazon_pass'])?$_POST['amazon_pass']:'';
	$amazon_dimension  = isset($_POST['amazon_dimension'])?$_POST['amazon_dimension']:'';
	$android_id        = isset($_POST['android_id'])?$_POST['android_id']:'';
	$android_pass      = isset($_POST['android_pass'])?$_POST['android_pass']:'';
	$android_dimension = isset($_POST['android_dimension'])?$_POST['android_dimension']:'';
	$apple_id          = isset($_POST['apple_id'])?$_POST['apple_id']:'';
	$apple_pass        = isset($_POST['apple_pass'])?$_POST['apple_pass']:'';
	$apple_dimension   = isset($_POST['apple_dimension'])?$_POST['apple_dimension']:'';
	// predefined ID number for each of the account types
	$amazon_user  = '341';
	$android_user = '342';
	$apple_user   = '343';
	$message 	  = 'ok';
	// calls helper method to create/update each of the account types
	helper_credential_update($amazon_user, $amazon_id, $amazon_pass, $amazon_dimension, $apikey, $apisec);
	helper_credential_update($android_user, $android_id, $android_pass, $android_dimension, $apikey, $apisec);
	helper_credential_update($apple_user, $apple_id, $apple_pass, $apple_dimension, $apikey, $apisec);

	drupal_json_output($message);
	drupal_exit();
}
/**
 * Pulls the stored Folio Producer credentials from the database.
 * @return array containing the user credentials and Folio Producer API's key and secret
 */
function adobe_dps_credentials_pull() {
	// loads each respective users
	$amazon    = user_load('341');
	$android   = user_load('342');
	$apple     = user_load('343');
	$container = array();
	$container['amazon']['id']         = isset($amazon->name)?$amazon->name:'';
	$container['amazon']['pass']       = isset($amazon->mail)?$amazon->mail:'';
	$amazon_dimension                  = isset($amazon->theme)?$amazon->theme:'960 x 640,';
	$container['amazon']['dimension']  = explode(',', $amazon_dimension);
	$container['android']['id']        = isset($android->name)?$android->name:'';
	$container['android']['pass']      = isset($android->mail)?$android->mail:'';
	$android_dimension                 = isset($android->theme)?$android->theme:'960 x 640,';
	$container['android']['dimension'] = explode(',', $android_dimension);
	$container['apple']['id']          = isset($apple->name)?$apple->name:'';
	$container['apple']['pass']        = isset($apple->mail)?$apple->mail:'';
	$apple_dimension                   = isset($apple->theme)?$apple->theme:'480 x 320,1024 x 768,1136 x 640,2048 x 1536,';
	$container['apple']['dimension']   = explode(',', $apple_dimension);
	// loads the API key and secret (each account, if exist, should hold the same API key and secret)
	if (!empty($amazon) && $amazon->signature && $amazon->signature_format) {
		$apikey = $amazon->signature;
		$apisec = $amazon->signature_format;
	} else if (!empty($android) && $android->signature && $android->signature_format) {
		$apikey = $android->signature;
		$apisec = $android->signature_format;
	} else if (!empty($apple) && $apple->signature && $apple->signature_format) {
		$apikey = $apple->signature;
		$apisec = $apple->signature_format;
	}
	$container['apikey'] = $apikey;
	$container['apisec'] = $apisec;
	drupal_json_output($container);
	drupal_exit();
}
/**
 * Creates a new folio node in the database with the given folio metadata.
 * @param string $fname .....folio name
 * @param string $fnumber ...folio number
 * @param string $pname .....folio publication name
 * @param string $pdate .....folio publication date
 * @param array  $articles ..articles within the folio node
 */
function adobe_folio_add() {
	$fname    = isset($_POST['fname'])?$_POST['fname']:'';
	$fnumber  = isset($_POST['fnumber'])?$_POST['fnumber']:'';
	$pname    = isset($_POST['pname'])?$_POST['pname']:'';
	$pdate    = isset($_POST['pdate'])?$_POST['pdate']:'';
	$articles = isset($_POST['articles'])?$_POST['articles']:'';
	$message  = 'ok';
	// if any of the above POST request are not met
	if (!$fname || !$pname || !$fnumber || !$pdate || !$articles) {
		$message = '[Error] Missing folio name, publication name, folio number, publication date, and/or list of articles!';
	} else {
		$lang = 'und';
		// creates the new node
		$folio = new stdClass();
		$folio->uid = 1;
		$folio->type = 'folios';
		$folio->language = $lang;
		$folio->title = $fname;
		$folio->status = 1;
		$folio->promote = 0;
		$folio->sticky = 0;
		$folio->created = timestamp;
		$folio->field_folio_product_id          = array($lang => array(array('value' => '')));
		$folio->field_folio_publication_name    = array($lang => array(array('value' => $pname)));
		$folio->field_folio_number              = array($lang => array(array('value' => $fnumber)));
		$folio->field_folio_description         = array($lang => array(array('value' => '')));
		$folio->field_folio_viewer_version      = array($lang => array(array('value' => '27.0.0')));
		$folio->field_folio_producer_accounts   = array($lang => array(array('value' => 'apple')));
		$folio->field_folio_status              = array($lang => array(array('value' => 'Not Uploaded')));
		$folio->field_folio_sync_status         = array($lang => array(array('value' => 'Not Sync')));
		$folio->field_folio_producer_timestamp  = array($lang => array(array('value' => '')));
		$folio->field_folio_dimension           = array($lang => array(array('value' => '1024 x 768')));
		$folio->field_folio_orientation         = array($lang => array(array('value' => 'Always')));
		$folio->field_folio_publication_css     = array($lang => array(array('value' => 'Foundation')));
		$folio->field_folio_published_date      = array($lang => array(array('value' => $pdate)));
		$folio->field_folio_toc                 = array($lang => array(array('value' => 'Generated')));
		$folio->field_folio_toc_layout          = array($lang => array(array('value' => 'Foundation')));
		$folio->field_folio_auto_generate       = array($lang => array(array('value' => 'Generate Both')));
		$folio->field_folio_ads_filter          = array($lang => array(array('value' => '')));
		$folio->field_folio_library_filter      = array($lang => array(array('value' => '')));
		$folio->field_folio_landscape_url       = array($lang => array(array('value' => '')));
		$folio->field_folio_portrait_url        = array($lang => array(array('value' => '')));
		$folio->field_folio_producer_article_id = array($lang => array(array('value' => '')));
		node_save_action($folio);
		// calls helper method to update the folio-to-articles and articles-to-folio references
		helper_folio_append($folio->nid, $articles);
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Appends the given list of articles to an existing folio node.
 * @param string $fid .......folio node ID
 * @param array  $articles ..articles within the folio node
 */
function adobe_folio_append() {
	$fid      = isset($_POST['fid'])?$_POST['fid']:'';
	$articles = isset($_POST['articles'])?$_POST['articles']:'';
	$message  = 'ok';
	// if any of the above POST request are not met
	if (!$fid || !$articles) {
		$message = '[Error] Missing folio node ID and/or list of articles!';
	} else {
		// calls helper method to append the added articles to an existing folio node
		helper_folio_append($fid, $articles);
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Attempts to remove the generated HTML Article folders and folio files,
 *   with the given list of file names.
 * @param string $filenames ..list of file names that were used to generate HTML Articles and .folio files
 */
function adobe_folio_cleanup() {
	$filenames = isset($_POST['filenames'])?$_POST['filenames']:'';
	$message  = 'ok';
	if (!$filenames) {
		$message = '[Error] Missing array containing file metadata!';
	} else {
		for ($i = 0; $i < sizeof($filenames); $i++) {
			$file = helper_format_title($filenames[$i]);
			unlink(dirname(__FILE__).'/folio/'.$file.'.folio');
			helper_rrmdir(dirname(__FILE__).'/html/'.$file);
		}
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Given the folio node ID, pull the folio node content,
 *   reset the NID, VID, folio ID, upload status, and non-Drupal articles ID
 * @param string $fid ..folio node ID
 */
function adobe_folio_clone_node() {
	$fid = isset($_POST['fid'])?$_POST['fid']:'';
	$message = 'ok';
	if (!$fid) {
		$message = '[Error] Missing folio node ID!';
	} else {
		$folio = node_load($fid);
		unset($folio->nid);
		unset($folio->vid);
		$folio->field_folio_product_id['und'][0]['value'] = '';
		$folio->field_folio_status['und'][0]['value'] = 'Not uploaded';
		$folio->field_folio_sync_status['und'][0]['value'] = 'Not Sync';
		$folio->field_folio_producer_article_id['und'][0]['value'] = '';
		$referenceLength = sizeof($folio->field_folio_reference['und']);
		for ($i = 0; $i < $referenceLength; $i++)
			if ($folio->field_folio_reference['und'][$i]['target_id'] == $fid)
				unset($folio->field_folio_reference['und'][$i]);
		node_save($folio);
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Given the folio node ID, delete the folio node from the database.
 * @param string $fid ..folio node ID
 */
function adobe_folio_delete_node() {
	$fid = isset($_POST['fid'])?$_POST['fid']:'';
	$message = 'ok';
	if (!$fid) {
		$message = '[Error] Missing folio node ID!';
	} else {
		node_delete($fid);
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Create a temperary HTML Article to preview.
 * @param string $fid .......folio node ID
 * @param array  $articles ..articles within the folio node
 */
function adobe_folio_article_preview() {
	$previewID = isset($_POST['previewID'])?$_POST['previewID']:'';
	$pname     = isset($_POST['pname'])?$_POST['pname']:'';
	$pubcss    = isset($_POST['pubcss'])?$_POST['pubcss']:'';
	$output    = array('message' => 'ok');
	// if any of the above POST request are not met
	if (!$previewID || !$pname || !$pubcss) {
		$output['message'] = '[Error] Missing Article node ID, Publication Name, or Publication Stylesheet!';
	} else {
		$articleNode = helper_pull_node($previewID);
		$publication = $pname;
		$title       = isset($articleNode['title'])?$articleNode['title']:'';
		$author      = isset($articleNode['author'])?$articleNode['author']:'';
		$kicker      = isset($articleNode['kicker'])?$articleNode['kicker']:'';
		$body        = isset($articleNode['body'])?$articleNode['body']:'';
		$images      = isset($articleNode['image'])?$articleNode['image']:'';
		$videos      = isset($articleNode['video'])?$articleNode['video']:'';
		$toc         = '';
		// create the directory and its default files
		helper_create_dir(helper_format_title($title));
		// unzip the selected stylesheet for preview
		$result = helper_extract_stylesheet($pubcss);
		// apply the stylesheet framework for preview
		if (strpos($pubcss, 'Bootstrap') !== false) // derivative of Bootstrap framework
			helper_style_bootstrap($publication, $title, $author, $kicker, $body, $images, $videos);
		else if (strpos($pubcss, 'Foundation') !== false) // derivative of Foundation framework
			helper_style_foundation($publication, $title, $author, $kicker, $body, $images, $videos);
		$output['title'] = $title;
	}
	drupal_json_output($output);
	drupal_exit();
}
/**
 * Delete the targeted HTML Article,
 *   which was created temperary for previewing purposes.
 * @param string $filename ..article name, used to delete the temperary HTML Article
 */
function adobe_folio_article_delete() {
	$filename  = isset($_POST['filename'])?$_POST['filename']:'';
	$message   = 'ok';
	// if any of the above POST request are not met
	if (!$filename) {
		$message = '[Error] Missing article or stylsesheet name!';
	} else {
		$directory = drupal_get_path("module", "adobe").'/html/';
		// calls helper to recursively remove the generated HTML article folder
		helper_rrmdir($directory.$filename);
		// calls helper to recursively remove the unzipped HTML resources folder
		helper_rrmdir($directory.'HTMLResources');
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Create .folio files from the list of article names.
 * @param array $filenames ..List of file names
 */
function adobe_folio_generate_folios() {
	$filenames = isset($_POST['filenames'])?$_POST['filenames']:'';
	$message   = 'ok';
	if (!$filenames) {
		$message = '[Error] Missing the list of file names!';
	} else {
		for ($i = 0; $i < sizeof($filenames); $i++) {
			if ($filenames[$i] == '')
				continue;
			// locations of the targeted HTML article folder to the designated .folio file
			$filename    = helper_format_title($filenames[$i]);
			$directory   = drupal_get_path('module', 'adobe');
			$source      = $directory.'/html/'.$filename;
			$destination = $directory.'/folio/'.$filename.".folio";
			// commands to zip up the HTML article folder
			$zip_mtype = "zip -r -j ".$destination." ".$source."/mimetype"; 
			$zip_xml   = "zip -r -j ".$destination." ".$source."/Folio.xml"; 
			$zip_rest  = "zip -r -j ".$destination." ".$source."/*";
			// linux built-in zipper
			exec($zip_mtype);
			exec($zip_xml);
			exec($zip_rest);
		}
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Create HTML Articles from the articles within the given folio node
 * @param string $folioNodeID ..folio node ID
 */
function adobe_folio_generate_html() {
	$folioNodeID  = isset($_POST['folioNodeID'])?$_POST['folioNodeID']:'';
	$folioNode 	  = helper_pull_content($folioNodeID);
	$article_list = $folioNode['articles'];
	$file_list    = array();
	$offset       = 1;
	// if given landscape and portrait images, generate the cover page
	if ($folioNode['landscape'] != '' || $folioNode['portrait'] != '') {
		// generate the cover if the toggle is set to auto-generate the cover
		if ($folioNode['autoToggle'] == 'Generate Cover' || $folioNode['autoToggle'] == 'Generate Both') {
			array_push($file_list, 'Cover');
			// calls helper to generate HTML cover article folder
			helper_generate_html(
				array(
					'title'  => 'Cover',
					'author' => 'Generated',
					'desc'   => 'Cover',
					'kicker' => $folioNode['pubCSS'],
					'tags'   => '',
					'cover'  => true), 
				$folioNode,
				false
			);
			$offset++;
		}
	}
	// append the ToC if the toggle is set to auto-generate the ToC
	if ($folioNode['autoToggle'] == 'Generate ToC' || $folioNode['autoToggle'] == 'Generate Both') {
		array_push($file_list, 'Table of Contents');
	}
	// generate the individual HTML Articles
	for ($n = 0; $n < sizeof($article_list); $n++) {
		// if it is content not from Drupal, don't generate HTML articles and .folio files
		if ($article_list[$n]['target_id'] == $folioNodeID) {
			array_push($file_list, '');
			continue;
		}
		$articleNode  = helper_pull_node($article_list[$n]['target_id']);
		// calls helper to generate HTML article folder
		helper_generate_html($articleNode, $folioNode, $folioNode['isAds'][$n]);
		array_push($file_list, $articleNode['title']);
	}
	// generate the ToC if the toggle is set to auto-generate the ToC
	if ($folioNode['autoToggle'] == 'Generate ToC' || $folioNode['autoToggle'] == 'Generate Both') {
		// calls helper to generate HTML ToC folder
		helper_generate_html(
			array(
				'title'  => 'Table of Contents',
				'author' => 'Generated',
				'desc'   => 'Table of Contents',
				'kicker' => $folioNode['pubCSS'],
				'tags'   => ''), 
			$folioNode, 
			false,
			$file_list
		);
	}
	drupal_json_output($file_list);
	drupal_exit();
}
/**
 * Create HTML Articles from the selected article within the given folio node
 * @param string $folioNodeID ....folio node ID
 * @param string $articleNodeID ..article node ID
 */
function adobe_folio_generate_selected_html() {
	$folioNodeID   = isset($_POST['folioNodeID'])?$_POST['folioNodeID']:'6';
	$articleNodeID = isset($_POST['articleNodeID'])?explode(',', $_POST['articleNodeID']):explode(',', '4,5');
	$message       = array('message' => 'ok');
	if (!$folioNodeID || !$articleNodeID) {
		$message['message'] = '[Error] Missing the folio node ID and/or article node ID!';
	} else {
		// stores the generated file names, used to delete later
		$filenames = array();
		// calls helper to pull folio node metadata
		$folioNode = helper_pull_content($folioNodeID);
		// get local path
		$currentDIR = drupal_get_path('module', 'adobe');
		// loops through each article node ID
		for ($i = 0; $i < sizeof($articleNodeID); $i++) {
			if ($articleNodeID[$i] == '')
				continue;
			// calls helper to pull article node metadata
			$articleNode = helper_pull_node($articleNodeID[$i]);
			// calls helper to generate HTML article folder
			helper_generate_html($articleNode, $folioNode, $folioNode['isAds']);
			// calls helper to format the article title
			$filename = helper_format_title($articleNode['title']);
			// stores the file name
			$filenames[] = $filename;
		}
		// returns the path to the generated html stack .zip file
		$message['filename'] = 'html_stacks';
		$message['destination'] = $currentDIR.'/folio/html_stacks.zip';
		// zip up all the generated HTML article .zip files via Linux built-in zipper
		$zipper  = "cd ".$currentDIR." && zip -r folio/html_stacks.zip html/*";
		exec($zipper);
		// delete the generated HTML article folders
		for ($n = 0; $n < sizeof($filenames); $n++) {
			helper_rrmdir($currentDIR.'/html/'.$filenames[$n]);
		}
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Given the file name and the server path to the selected file,
 *   download the file and delete it from the server.
 * @param $filename .....name of the selected file
 * @param $destination ..path to the selected file
 * @param $toggle .......trigger to delete the selected file
 */
function adobe_folio_download_selected() {
	$filename    = isset($_POST['filename'])?$_POST['filename']:'';
	$destination = isset($_POST['destination'])?$_POST['destination']:'';
	$toggle      = isset($_POST['toggle'])?$_POST['toggle']:'';
	$message     = 'ok';
	if (!$filename || !$destination) {
		$message['message'] = '[Error] Missing the folio node ID and/or article node ID!';
	} else {
		// if the zip file was successfully created
		if (file_exists($destination)) {
			// include necessary headers for download (mainly for I.E.)
			header("Pragma: public");
			header("Expires: 0");
			header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
    		header("Cache-Control: private", false);
			header("Content-Description: File Transfer");
			header("Content-type: application/zip");
			header("Content-Disposition: attachment; filename=\"".$filename.".zip\"");
			header("Content-Transfer-Encoding: binary");
			header("Content-Length: ".filesize($destination));
    		ob_clean(); 
    		flush(); 
			readfile($destination);
			if ($toggle == '1') // delete the file from server
				unlink($destination);
		}
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Pull the folio metadata and the account associated from the given folio node ID
 * @param string $folioNodeID ..folio node ID
 * @return array containing the folio metadata and the Folio Producer Account info
 */
function adobe_folio_pull_accounts() {
	$folioNodeID = isset($_POST['folioNodeID'])?$_POST['folioNodeID']:'';
	$folioNode   = node_load($folioNodeID);
	$account     = $folioNode->field_folio_producer_accounts['und'][0]['value'];
	$container   = array();
	switch ($account) {
		case 'amazon':
			$userID = '341'; $type = 'Amazon'; break;
		case 'android':
			$userID = '342'; $type = 'Android'; break;
		case 'apple':
		default:
			$userID = '343'; $type = 'Apple'; break;
	}
	$user = user_load($userID);
	// if any of the user info are missing
	if (!$user->name || !$user->mail || !$user->signature || !$user->signature_format) {
		$container['message'] = '[Error] Adobe ID, Adobe Password, Adobe API key, and/or Adobe secret are missing or incorrect!';
	} else { // load folio metadata and account metadata if user info are available
		$container['message'] = 'ok';
		$container['account']['type']	   = $type;
		$container['account']['adobeID']   = $user->name;
		$container['account']['password']  = $user->mail;
		$container['account']['apiKey']    = $user->signature;
		$container['account']['apiSecret'] = $user->signature_format;
		$lang = $folioNode->language;
		$container['folioMeta']['folioNodeID'] = $folioNodeID;
		$container['folioMeta']['folioName']   = $folioNode->title;
		$container['folioMeta']['productID']   = $folioNode->field_folio_product_id[$lang][0]['value'];
		$container['folioMeta']['magTitle']    = $folioNode->field_folio_publication_name[$lang][0]['value'];
		$container['folioMeta']['folioNum']    = $folioNode->field_folio_number[$lang][0]['value'];
		$container['folioMeta']['folioDesc']   = $folioNode->field_folio_description[$lang][0]['value'];  
		$container['folioMeta']['pubDate']     = $folioNode->field_folio_published_date[$lang][0]['value'];
		$container['folioMeta']['alienated']   = explode(',', $folioNode->field_folio_producer_article_id[$lang][0]['value']);
		$container['folioMeta']['dimension']   = $folioNode->field_folio_dimension[$lang][0]['value'];
		$container['folioMeta']['orientation'] = $folioNode->field_folio_orientation[$lang][0]['value'];
		$container['folioMeta']['viewer']      = $folioNode->field_folio_viewer_version[$lang][0]['value'];
		$container['folioMeta']['filter']      = $folioNode->field_folio_library_filter[$lang][0]['value'];
		$container['folioMeta']['status']      = $folioNode->field_folio_status[$lang][0]['value'];
		$container['folioMeta']['stylesheet']  = $folioNode->field_folio_publication_css[$lang][0]['value'];
		$container['folioMeta']['landscape']   = $folioNode->field_folio_landscape_url[$lang][0]['value'];
		$container['folioMeta']['portrait']    = $folioNode->field_folio_portrait_url[$lang][0]['value'];
	}
	drupal_json_output($container);
	drupal_exit();
}
/**
 * Pull the Article node fields from the given Article node ID
 * @param string $nodeID ..Article node ID
 * @return array containing the article metadata
 */
function adobe_folio_pull_article() {
	$nodeID = isset($_POST['nodeID'])?$_POST['nodeID']:'';
	// calls helper method to pull article metadata associated with the article ID
	$container = helper_pull_article($nodeID);
	drupal_json_output($container);
	drupal_exit();
}
/**
 * Pull the folio node fields from the given folio node ID
 * @param string $nodeID ..folio node ID
 * @return array containing the folio metadata
 */
function adobe_folio_pull_content() {
	$nodeID    = isset($_POST['nodeID'])?$_POST['nodeID']:'';
	$toggle    = isset($_POST['toggle'])?$_POST['toggle']:'';
	// calls helper method to pull folio metadata associated with the folio ID
	$container = helper_pull_content($nodeID, $toggle);
	drupal_json_output($container);
	drupal_exit();
}
/**
 * Update the targeted folio node in the database.
 *  Contains Folio Producer's folio metadata.
 * @param string $fid ........folio node ID
 * @param string $fdesc ......folio description
 * @param string $fname ......folio name
 * @param string $fnumber ....folio number
 * @param string $fversion ...folio version
 * @param string $pid ........folio publication ID
 * @param string $pdate ......folio publication date
 * @param string $pname ......folio publication name
 * @param string $pubcss .....folio publication stylesheet
 * @param string $toccss .....folio table of contents stylesheet
 * @param array  $articles ...articles within the folio node
 * @param array  $isads ......articles if add selector, matches $articles
 * @param string $libfilter ..folio filter
 */
function adobe_folio_update() {
	$fid         = isset($_POST['fid'])?$_POST['fid']:'';
	$fdesc       = isset($_POST['fdesc'])?$_POST['fdesc']:'';
	$fname       = isset($_POST['fname'])?$_POST['fname']:'';
	$fnumber     = isset($_POST['fnumber'])?$_POST['fnumber']:'';
	$fversion    = isset($_POST['fversion'])?$_POST['fversion']:'';
	$pdate       = isset($_POST['pdate'])?$_POST['pdate']:'';
	$pname       = isset($_POST['pname'])?$_POST['pname']:'';
	$pubcss      = isset($_POST['pubcss'])?$_POST['pubcss']:'';
	$toccss      = isset($_POST['toccss'])?$_POST['toccss']:'';
	$accounts    = isset($_POST['accounts'])?$_POST['accounts']:'';
	$articles    = isset($_POST['articles'])?$_POST['articles']:'';
	$dimension   = isset($_POST['dimension'])?$_POST['dimension']:',';
	$orientation = isset($_POST['orientation'])?$_POST['orientation']:',';
	$autoToggle  = isset($_POST['autoToggle'])?$_POST['autoToggle']:',';
	$isads       = isset($_POST['isads'])?$_POST['isads']:'';
	$filter      = isset($_POST['filter'])?$_POST['filter']:'';
	$alienated   = "";
	$message     = 'ok';
	// if any of the above POST request are not met
	if (!$fid || !$fname || !$fnumber || !$pdate || !$pname || !$pubcss || !$accounts || !$articles) {
		$message = '[Error] Missing folio node ID, folio name, publication name, folio number, publication date, publication stylesheet, ToC stylesheet, target dimension, or list of articles!';
	} else {
		$node = node_load($fid);
		$lang = $node->language;
		$node->title = $fname;
		$node->field_folio_publication_name[$lang][0]['value']  = $pname;
		$node->field_folio_number[$lang][0]['value']            = $fnumber;
		$node->field_folio_published_date[$lang][0]['value']    = $pdate;
		$node->field_folio_description[$lang][0]['value']       = $fdesc;
		$node->field_folio_viewer_version[$lang][0]['value']    = $fversion;
		$node->field_folio_producer_accounts[$lang][0]['value'] = $accounts;
		$node->field_folio_publication_css[$lang][0]['value']   = $pubcss;
		$node->field_folio_toc_layout[$lang][0]['value']        = $pubcss;
		$node->field_folio_dimension[$lang][0]['value']         = $dimension;
		$node->field_folio_orientation[$lang][0]['value']       = $orientation;
		$node->field_folio_auto_generate[$lang][0]['value']     = $autoToggle;
		$node->field_folio_ads_filter[$lang][0]['value']        = $isads;
		$node->field_folio_library_filter[$lang][0]['value']    = $filter;
		// updates the order of the existing article(s) for the targeted folio
		$articles = explode(',', $articles);
		$numUpdated = 0;
		// replace the existing article ID with the new article ID
		for ($i = 0; $i < sizeof($articles); $i++) {
			if ($articles[$i] == '') {
				continue;
			} else if (strlen($articles[$i]) > 10) {
				$node->field_folio_reference[$lang][$i]['target_id'] = $fid;
				$alienated .= $articles[$i].",";
			} else {
				$node->field_folio_reference[$lang][$i]['target_id'] = $articles[$i];
			}
			$numUpdated++;
		}
		$node->field_folio_producer_article_id[$lang][0]['value'] = $alienated;
		// remove any extra article ID
		if ($numUpdated == 0) {
			unset($node->field_folio_reference[$lang][0]);
		} else {
			for ($n = $numUpdated; $n <= sizeof($node->field_folio_reference[$lang]); $n++) {
				unset($node->field_folio_reference[$lang][$n]);
			}
		}
		node_save_action($node);
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Stores the folio ID (created in Folio Producer)
 *  in the folio node (Drupal node)
 * @param string $folioNodeID ..folio node ID from Drupal
 * @param string $folioID ......folio ID from the Folio Producer
 */
function adobe_folio_update_status() {
	$folioNodeID = isset($_POST['folioNodeID'])?$_POST['folioNodeID']:'';
	$folioID     = isset($_POST['folioID'])?$_POST['folioID']:'';
	$message     = 'ok';
	// if any of the above POST request are not met
	if (!$folioID || !$folioNodeID) {
		$message = '[Error] Missing folio node ID and/or folio ID!';
	} else {
		$folioNode = node_load($folioNodeID);
		$folioNode->field_folio_product_id['und'][0]['value'] = $folioID;
		$folioNode->field_folio_status['und'][0]['value'] = 'Uploaded';
		node_save($folioNode);
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Given the folio node ID, 
 *   update the timestamp for when the folio was last uploaded to the Folio Producer,
 *   update the sync status to 'In Sync'.
 *   Used for checking if the local Drupal articles are in sync with the Folio Producer.
 */
function adobe_folio_update_timestamp() {
	$folioNodeID = isset($_POST['folioNodeID'])?$_POST['folioNodeID']:'';
	$message     = 'ok';
	// if any of the above POST request are not met
	if (!$folioNodeID) {
		$message = '[Error] Missing folio node ID!';
	} else {
		$folioNode = node_load($folioNodeID);
		$folioNode->field_folio_producer_timestamp['und'][0]['value'] = date('Y-m-d\TH:i:s');
		$folioNode->field_folio_sync_status['und'][0]['value'] = 'In Sync';
		node_save($folioNode);
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Store the given landscape or portrait image file.
 *  Contains Folio Producer's folio metadata.
 * @param string $fid ........folio node ID
 * @param string $fname ......folio name
 * @param string $landscape ..landscape image path
 * @param string $portrait ...portrait image path
 */
function adobe_img_upload() {
	$fid       = isset($_POST['fid'])?$_POST['fid']:'';
	$fname     = isset($_POST['fname'])?$_POST['fname']:'';
	$landscape = isset($_FILES['landscape'])?$_FILES['landscape']:'';
	$portrait  = isset($_FILES['portrait'])?$_FILES['portrait']:'';
	$message   = 'ok';
	if (!$fid || !$fname) {
		$message = '[Error] Missing folio node ID, folio name, or toggle';
	} else {
		$node = node_load($fid);
		$landscape_url = ''; $portrait_url = '';
		if ($landscape && !$landscape['error']) { 
			$landscape_fn  = $landscape['name'];
			$landscape_url = $landscape['tmp_name'];
			$landscapePath = drupal_get_path('module', 'adobe').'/images/landscape/'.helper_format_title($fname).'_'.$landscape_fn;
			//$landscapeFake = '/sites/all/modules/adobe/images/landscape/'.helper_format_title($fname).'_'.$landscape_fn;
			move_uploaded_file($landscape_url, $landscapePath);
			$node->field_folio_landscape_url['und'][0]['value'] = $landscapePath;
		} 
		if ($portrait && !$portrait['error']) { 
			$portrait_fn  = $portrait['name'];
			$portrait_url = $portrait['tmp_name'];
			$portraitPath = drupal_get_path('module', 'adobe').'/images/portrait/'.helper_format_title($fname).'_'.$portrait_fn;
			//$portraitFake = '/sites/all/modules/adobe/images/portrait/'.helper_format_title($fname).'_'.$portrait_fn;
			move_uploaded_file($portrait_url, $portraitPath);
			$node->field_folio_portrait_url['und'][0]['value'] = $landscapePath;
		}
		node_save_action($node);
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Read the available local stylesheets,
 *  located within /adobe/styles.
 * @return array containing the name of the local stylesheets
 */
function adobe_stylesheet_reader() {
	$stylesheets = array();
	$directory = new DirectoryIterator(dirname(__FILE__).'/styles');
	foreach ($directory as $file)
		if (!$file->isDot() && $file->getFilename() !== '.DS_Store' && $file->getFilename() !== 'HTMLResources')
			array_push($stylesheets, $file->getFilename());
	drupal_json_output($stylesheets);
	drupal_exit();
}
/**
 * Delete the targeted stylesheet from the local directory,
 *   located within /adobe/styles
 * @param string filename ..the name of the local stylesheet
 */
function adobe_stylesheet_delete() {
	$filename = isset($_POST['filename'])?$_POST['filename']:'';
	$message  = 'ok';
	if (!$filename) {
		$message = '[Error] Missing file name!';
	} else if ($filename == 'Bootstrap' || $filename == 'Foundation') {
		$message = '[Denied] Cannot delete the stocked Bootstrap or Foundation stylesheet!';
	} else {
		$directory = drupal_get_path('module', 'adobe').'/styles/';
		helper_rrmdir($directory.$filename);
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Delete the targeted stylesheet from the local directory,
 *   located within /adobe/styles
 * @param string filename ....the name of the uploaded stylesheet
 * @param string derivative ..the framework that the stylesheet is based off of (Foundation or Bootstrap)
 * @param file   zipfile .....the url to the uploaded zip file (containing the stylesheet)
 */
function adobe_stylesheet_upload() {
	$filename   = isset($_POST['filename'])?helper_format_title($_POST['filename'], '_'):'';
	$derivative = isset($_POST['derivative'])?$_POST['derivative']:'';
	$zipfile    = isset($_FILES['zipfile'])?$_FILES['zipfile']:'';
	$message    = 'ok-';
	if (!$filename || !$derivative || !$zipfile || $zipfile['error']) {
		$message = '[Error]-Missing file name or targeted derivative or zip file to upload!';
	} else if ($filename == 'Bootstrap' || $filename == 'Foundation') {
		$message = '[Denied]-Cannot override the stocked Bootstrap or Foundation stylesheet!';
	} else {
		$directory = drupal_get_path('module', 'adobe').'/styles/'.$derivative.'-'.$filename;
		mkdir($directory);
		$destination = $directory.'/HTMLResources.zip';
		move_uploaded_file($zipfile['tmp_name'], $destination);
		$message .= $filename;
	}
	drupal_json_output($message);
	drupal_exit();
}
/**
 * Redirects the user to the ACCESS DENIED page.
 */
function adobe_views_access_denied() {
	drupal_access_denied();
	drupal_exit();
}
/* Implements hook_block_info() */
function adobe_block_info() {    
	$blocks['adobe-block'] = array(
		'info' => t('Adobe Folio Creator'),
	); 
	return $blocks;
}
/* Implements hook_block_view(). */
function adobe_block_view($delta = '') {
	switch ($delta) {
		case 'adobe-block':
			$block['subject'] = NULL;
			$block['content'] = theme('adobe');
			break;
	}
	return $block;
}
/* Implements hook_node_info() */
function adobe_node_info() {
	return array(
		'folios' => array(
			'name' => t('Folios'),
			'base' => 'folios',
			'description' => t('folio node containing metadata for Folio Producer.'),
			'has_title' => TRUE,
			'title_label' => t('Folios') ),
	);
}
/* Implements hook_permission() */
function adobe_permission() {
	return array(
		'folio_article_permission' => array(
			'title' => t('Folio Article Selection View'),
			'description' => t('Allow users to add articles to a folio.'),
		),
		'folio_management_permission' => array(
			'title' => t('Folio Management View'),
			'description' => t('Allow users to edit and upload folios.'),
		),
		'folio_config_permission' => array(
			'title' => t('Adobe DPS Folio Module Config'),
			'description' => t('Allow users to add and edit Folio Producer credentials.'),
		),
	);
}
/* Implements hook_theme() */
function adobe_theme() {
	return array (
		'adobe' => array(
			'template' => 'adobe',
			'arguments' => array(),
		),
	);
}
/* Implementation of hook_views_api() */
function adobe_views_api() {
	return array(
		'api' => 2.0,
	);  
}
/* Implement hook_form() */
function folios_form($node, $form_state) {
	return node_content_form($node, $form_state);
}
/* 
 * Implement hook_node_update()
 *
 * Upon updating an article,
 *  mark all folios that contain this article as out-of-sync
 */
function adobe_node_update($node) {
	if ($node->type == 'article' && isset($node->field_article_reference)) {
		// loops through the folio references
		for ($i = 0; $i < sizeof($node->field_article_reference['und']); $i++) {
			$folio_node_id = $node->field_article_reference['und'][$i]['target_id'];
			$folio_node = node_load($folio_node_id);
			$folio_node->field_folio_sync_status['und'][0]['value'] = "Not Sync";
			node_save_action($folio_node);
		}
	}
}
/* 
 * Implement hook_node_delete()
 *
 * Upon deleting an article,
 *  cascade its folio references.
 *
 * Upon deleting an folio,
 *  cascade its article references.
 */
function adobe_node_delete($node) {
	if ($node->type == 'article' && isset($node->field_article_reference['und'][0]['target_id'])) {
		// loops through the article-to-folio references
		for ($i = 0; $i < sizeof($node->field_article_reference['und']); $i++) {
			$found = false;
			$folio_node_id = $node->field_article_reference['und'][$i]['target_id'];
			$folio_node = node_load($folio_node_id);
			$folio_reference_len = sizeof($folio_node->field_folio_reference['und']);
			// loops through the folio-to-article references
			for ($n = 0; $n < $folio_reference_len; $n++) {
				if ($folio_node->field_folio_reference['und'][$n]['target_id'] == $node->nid) {
					// shift the remaining items in folio-to-article reference list up one level
					for ($p = $n+1; $p < $folio_reference_len; $p++) {
						$folio_node->field_folio_reference['und'][$p-1]['target_id'] = 
							$folio_node->field_folio_reference['und'][$p]['target_id'];
					}
					$found = true;
					break;
				}
			}
			// if the targeted reference was found, deletes the last item in the folio-to-article reference's list
			if ($found) {
				unset($folio_node->field_folio_reference['und'][$folio_reference_len-1]);
				node_save_action($folio_node);
			}
		}
	} else if ($node->type == 'folios' && isset($node->field_folio_reference['und'][0]['target_id'])) {
		// loops through the folio-to-article references
		for ($i = 0; $i < sizeof($node->field_folio_reference['und']); $i++) {
			$found = false;
			$article_node_id = $node->field_folio_reference['und'][$i]['target_id'];
			$article_node = node_load($article_node_id);
			$article_reference_len = sizeof($article_node->field_article_reference['und']);
			// loops through the article-to-folio references
			for ($n = 0; $n < $article_reference_len; $n++) {
				if ($article_node->field_article_reference['und'][$n]['target_id'] == $node->nid) {
					// shift the remaining items in article-to-folio reference list up one level
					for ($p = $n+1; $p < $article_reference_len; $p++) {
						$article_node->field_article_reference['und'][$p-1]['target_id'] = 
							$article_node->field_article_reference['und'][$p]['target_id'];
					}
					$found = true;
					break;
				}
			}
			// if the targeted reference was found, deletes the last item in the article-to-folio reference's list
			if ($found) {
				unset($article_node->field_article_reference['und'][$article_reference_len-1]);
				node_save_action($article_node);
			}
		}
	}
}

